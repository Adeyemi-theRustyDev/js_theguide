!~> Javascipt the Definitive guide

~> Language Features

  ~ You can define your own methods for arrays (since they are technically objects) Syntax would be like:
    let my_arr = []; arr.to_str  = function() { // function body goes here }
  ~ Null Coalescing operator now in Javascript `??`
  ~ Javascript ignores line-breaks for the most part (even in statements lacking the semi-colon).
    Javascript treats some line-breaks as semi-colons and it does this using the following rules:
    - If the next line can't be treated as a continuation of the previous line, it adds a `;`
    - If the previous code can't be parsed without the addition of a `;`
    - The prevous is false in the case of the following keywords: yield, return, throw and break as
    their line-breaks are considered as semi-colons by the JS language
  ~ The defensive semi-colon is a semi-colon placed at the beginning of a line that could be interpreted
    as the continuation of the previous line by the Javascript interpreter.
  ~ In the javascript commenting system, you can not nest multi-line comments.
  ~ Although the javascript reserved keywords can't generally be used as identifiers, they can be used as property names in objects
  ~ Javascript defines a laguage syntax that helps in writing utf-8 characters using only ASCII characters.
  Syntax: "caf\u{E9}" or "caf\u00e9" these both spell out cafÃ©.


  				Arithmetik and Numbers
  ~ The javascript number type is a 64-bit numerical type as defined by ASCII
  ~ Operations like array indexing and bitwise operations use 32-bits instead.
  ~ Inifinity is as a result of arithmetic operations on the number type which should normally result in an overflow.
  ~ Divison by zero doesn't result in an exception in JS but instead gives either -Infinity or Infinity, or NaN for (0/0) operations
  ~ 0 / 0, Infinity / Infinity, -Infinity / -Infinity, NaN / NaN all result in NaN
  ~ Zero and Negative Zero are equal, but + and - Infinty aren't equal.
  ~ The Bigint type was introduced into JS to store integral numbers comaptible with other Programming languages and API.
  It is by defualt in the decimal format although can be used in other number base. 
  ~ The BigInt() function converts JS numbers into the type 'bigint'
  ~ The Math.trunc() function is used to truncate decimal values to their integral counterparts.
  ~ The methods of the Math object do not take in bigint as parameter
  ~ Mixed arithmetic operation btwn "bigint" and number is not allowed.
  ~ The javascript Date() constructor returns a date and the getTime() && and valueOf() methods return a timestamp just as the Date.now() 
  method which doesn't use a constructor to create a date.
  ~ the toString(radix/base) method for numbers accept an optional base which says the base for which it should 
  be converted to before being expressed as a string. The base is within the range 2 to 36
  ~ The num.ToFixed(n) number method converts a number, num to n, no of fixed decimal places.
  ~ The to exponential converts the number to exponential notation


  				Stringing things together
  ~ JS uses the UTF-16 character set of the UTF encoding.
  ~ The string method subString(a, b) effectively take a string slice from a to b (index b exclusive)
  ~ The slice method can perform the same func as subString() except it can also take -ve indexes.
  E.g let x = "adeyemi"; x.slice(-3) //=> 'emi'
  ~ string.indexOf('a', 4) //=> Returns first occurence of a in string starting from index 4. Position argument may be skipped
  and it just searches the entire string for the first occurence of the "string pattern" supplied.
  ~ In ES6 some boolean searching mthods have been added. These are:
    - string.startsWith("dis")
    - string.endsWith("dat")
    - string.includes("maybe")
  ~ The padStart and padEnd functions accept numbers as optional args to show how many (spaces - 1) will be added.
  ~ The "string".repeat(n) repeat the specified string n no of times.
  ~ Unicode-chars are written as "\u{uni_code_char}"
  ~ The String.raw`\n` temp-literal exclusive pseudo-func returns string without processing escaped chars.


  				Regular Expressions && Pattern Matching /SomeStuff/
  ~ They are denoted by a couple of slashes opposite of the escape-backk slash (like in comments => //) 
  ~ /^HTML/ => Matches the letters H, T, M or L at the start of a string
  ~ /[1-9][0-9]/* => Matches any non-zero digit thean any number of characters
  ~ /\d+/g => First text that matches one or more digits
  ~ There are some string methods that work on reeg-exp. They are:
    - string.search(pattern) // Returns the index of the first occurence that satisifies the pattern.
    - string.match(pattern) // Returns an array of matches 
    - string.replace(pattern, replacement) // Replaces the pattern found with the replacement string
    - string.split(pattern) // Splits on pattern occureence into an array of matches
    - string.test(pattern) // Returns a boolean value if the test passes or fails

    				Booleans: Truth or False (A game of Liar! Liar!)
  ~ Falsy values in javascript are: false, undefined, null, "", 0, -0, NaN
  ~ The == opertor considers null and undefined to be equal while the === defers otherwise

  				Signs && Symbols
  ~ The Symbol, introduced in ES6 was defined as a mechanism for lang-extension. 
  This arose as a result of the need to standardize iteration between object properties.
  Symbols are unique even when called with the same string.
  ~ Symbol() is used to create a new Symbol. It takes in an optional string argument.
  It should be noted that this Symbol pseudo-constructor doesn't use the new keyword.
  ~ Symbol.for() method on the other hand does not create unique symbols if the same string is passed
  as an argument.
  ~ Symbol.keyFor(symbol_name) // returns the string passed to the symbol pseudo-constructor.


  						Touring the JavaScript world with the global Object
  ~ When a javascript program starts, a set of identifiers are available to the whole program, some constants--
  undefined, infinity, NaN--and even some functions Date(), RegExp() String(), Array(), Symbol(),
  and even some objects--Math and JSON are defined globally.
  This is made possible by the global object, the global object is available to your program either in a node environment
  as the property global or in the web browser through the property Window.
  ~ It should be noted that the browser's window property defines the core global property and also some
  additional globals specific to browsers and client-side Javascript.
  ~ ES2020 defines the `globalThis` property as a general way to refer to the global object in both the Browser
  and in the Node.js environment.
  ~ The Number(), String() and Boolean() globals are the simplest ways for type conversion.
  ~ Using this functions with the new keyword creates a wrapper-obj around it so beware.


  					Let us Identify VarIables.
  ~ Identifies defined with var are either function-scoped  or global-scoped depending on where they are defined
  ~ Identifiers defined with let and const can be  blocked-, function- or scoped globally depending on
  where they are defined.
  ~ Variables declared with var are a part of the globalThis object. It is otherwise for let and const
  ~ The Object.entries(obj_name) gives the entries (key, value) of the object passed
  ~ Use the elvis operator to acess property or indexes on objects that are null or undefined. 
  Like so: let a = null; a?.prop_name or a?.[0] for arrays.
  ~ Conditional function invocation. E.g. let not_func = undefined; not_func?.() // Doesn't throw err => undefined
  ~ The ` new Classname` can b used without the () parentheses if there are no args to the constructor
  ~ Property access or invocation has an higher precedence than any of the arithmetic operators.

   					Making a Public Statement
  ~ Statements are differnt from expressions in the sesnse that expressions return a value, but statements distinctively affact the state of the
  envionment.
  ~ The default case in switch statements isn;t compulsory and infact doesn't nedd to be the last statement in the switch expression.
  ~ The for loop declares the initialize, test, increment  expressions in-between the parentheses and the statement in it's body.
  ~ Any of this parameters may be omitted, but the semi-colon delimiting this expressions have to be  in place.
  ~ Arrays, strings, sets and Maps are iterable. !!! Objects are not iterable.
  ~ For of loops are used to loop over the values of iterables
  ~ The iterators of map do not iterate over only the keys or the values, but both keys and values in a destructured form
  like so: for(let [k, v] of hypotheticalMap) { // Do something }
  ~ You can label loops using the syntax `label: loop block`
  ~ You can then use the jump staement to perform a jump operation on the preferred loop using it's label.
  ~ E.g mainLoop: (while x > 0)  { if(x % 7 == 0) {continue mainLoop}
  ~ The throw statement is like the unwrap() function in rust. It exits with the expression passed as an argument to it.
  ~ When you use a try blocks defines boundaries for a block of expressions whose exceptions are to be handled.
  Though it is the try/catch/finally block, the other 2 are conditional. But when you have a try block yu should have at least one
  of them to follow.
  The try block defines expressions fro which exceptions or errors we want to handle
  - The catch block defines how to handle the exceptions
  - The finally block runs at the end regardless of what happened previously. // You can call cleanup funcs herer
  - When a module exports a single value it isused with the default keyword like so: `export default <thing_to_export>`

  			
					Looking at Javascript Objectively
  - All (akshually, most :) objects in js have a prototype.
  - objects can be created with the literal syntax, using the Object.create() method, and the new keyword.
  - Using Object.create() you can pass an obj-literal or null to creat an object.
  Null creates an object without any prototype. A Null-Prototype Object with 0 properties or methods
  Passing an object literal makes the obj prototype be the Object.prototype object.
  - You can also pass Object.prototype to the Object.create() method.
  - It should be noted that whatever is taken in as an argument of the Object.create() method is the prototype.
  - Javascript finds object properties by looking for the property in its objects "owned property" and if it is not found
  it check if the object has a prototype adn queries the prototype for the property. This continues like that till the property is found
  until a null-property is reached

~> The language environment [Node.js || Bun || Browser]

#~> Node.js:

  ~ .editor is used to signal the node env to createe an editor environmen in the current repl


~> Questions ?

  ~ Map ? (Chapter 1, Pg 12 | Example 1.4 [Character Frequency Histograms])
  ~ Symbols? (Chapter 3.6 pg 41 | What exactly is their use case?)
  ~ Two's complement, binary programming and numeric operations in other bases like octal and hex.
  ~ Generator functions (function* ) ?
