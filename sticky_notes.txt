!~> Javascipt the Definitive guide

~> Language Features

  ~ You can define your own methods for arrays (since they are technically objects) Syntax would be like:
    let my_arr = []; arr.to_str  = function() { // function body goes here }
  ~ Null Coalescing operator now in Javascript `??`
  ~ Javascript ignores line-breaks for the most part (even in statements lacking the semi-colon).
    Javascript treats some line-breaks as semi-colons and it does this using the following rules:
    - If the next line can't be treated as a continuation of the previous line, it adds a `;`
    - If the previous code can't be parsed without the addition of a `;`
    - The prevous is false in the case of the following keywords: yield, return, throw and break as
    their line-breaks are considered as semi-colons by the JS language
  ~ The defensive semi-colon is a semi-colon placed at the beginning of a line that could be interpreted
    as the continuation of the previous line by the Javascript interpreter.
  ~ In the javascript commenting system, you can not nest multi-line comments.
  ~ Although the javascript reserved keywords can't generally be used as identifiers, they can be used as property names in objects
  ~ Javascript defines a laguage syntax that helps in writing utf-8 characters using only ASCII characters.
  Syntax: "caf\u{E9}" or "caf\u00e9" these both spell out cafÃ©.


  				Arithmetik and Numbers
  ~ The javascript number type is a 64-bit numerical type as defined by ASCII
  ~ Operations like array indexing and bitwise operations use 32-bits instead.
  ~ Inifinity is as a result of arithmetic operations on the number type which should normally result in an overflow.
  ~ Divison by zero doesn't result in an exception in JS but instead gives either -Infinity or Infinity, or NaN for (0/0) operations
  ~ 0 / 0, Infinity / Infinity, -Infinity / -Infinity, NaN / NaN all result in NaN
  ~ Zero and Negative Zero are equal, but + and - Infinty aren't equal.
  ~ The Bigint type was introduced into JS to store integral numbers comaptible with other Programming languages and API.
  It is by defualt in the decimal format although can be used in other number base. 
  ~ The BigInt() function converts JS numbers into the type 'bigint'
  ~ The Math.trunc() function is used to truncate decimal values to their integral counterparts.
  ~ The methods of the Math object do not take in bigint as parameter
  ~ Mixed arithmetic operation btwn "bigint" and number is not allowed.
  ~ The javascript Date() constructor returns a date and the getTime() && and valueOf() methods return a timestamp just as the Date.now() 
  method which doesn't use a constructor to create a date.
  ~ the toString(radix/base) method for numbers accept an optional base which says the base for which it should 
  be converted to before being expressed as a string. The base is within the range 2 to 36
  ~ The num.ToFixed(n) number method converts a number, num to n, no of fixed decimal places.
  ~ The to exponential converts the number to exponential notation


  				Stringing things together
  ~ JS uses the UTF-16 character set of the UTF encoding.
  ~ The string method subString(a, b) effectively take a string slice from a to b (index b exclusive)
  ~ The slice method can perform the same func as subString() except it can also take -ve indexes.
  E.g let x = "adeyemi"; x.slice(-3) //=> 'emi'
  ~ string.indexOf('a', 4) //=> Returns first occurence of a in string starting from index 4. Position argument may be skipped
  and it just searches the entire string for the first occurence of the "string pattern" supplied.
  ~ In ES6 some boolean searching methods have been added. These are:
    - string.startsWith("dis")
    - string.endsWith("dat")
    - string.includes("maybe")
  ~ The padStart and padEnd functions accept numbers as optional args to show how many (spaces - 1) will be added.
  ~ The "string".repeat(n) repeat the specified string n no of times.
  ~ Unicode-chars are written as "\u{uni_code_char}"
  ~ The String.raw`\n` temp-literal exclusive pseudo-func returns string without processing escaped chars.


  				Regular Expressions && Pattern Matching /SomeStuff/
  ~ They are denoted by a couple of slashes opposite of the escape-backk slash (like in comments => //) 
  ~ /^HTML/ => Matches the letters H, T, M or L at the start of a string
  ~ /[1-9][0-9]/* => Matches any non-zero digit thean any number of characters
  ~ /\d+/g => First text that matches one or more digits
  ~ There are some string methods that work on reeg-exp. They are:
    - string.search(pattern) // Returns the index of the first occurence that satisifies the pattern.
    - string.match(pattern) // Returns an array of matches 
    - string.replace(pattern, replacement) // Replaces the pattern found with the replacement string
    - string.split(pattern) // Splits on pattern occurence into an array of matches
    - string.test(pattern) // Returns a boolean value if the test passes or fails

    				Booleans: Truth or False (A game of Liar! Liar!)
  ~ Falsy values in javascript are: false, undefined, null, "", 0, -0, NaN
  ~ The == operator considers null and undefined to be equal while the === defers otherwise

  				Signs && Symbols
  ~ The Symbol, introduced in ES6 was defined as a mechanism for lang-extension. 
  This arose as a result of the need to standardize iteration between object properties.
  Symbols are unique even when called with the same string.
  ~ Symbol() is used to create a new Symbol. It takes in an optional string argument.
  It should be noted that this Symbol function doesn't use the new keyword as it isn't a constructor.
  ~ Symbol.for() method on the other hand does not create unique symbols if the same string is passed
  as an argument.
  ~ Symbol.keyFor(symbol_name) // returns the string passed to the symbol pseudo-constructor.


  						Touring the JavaScript world with the global Object
  ~ When a javascript program starts, a set of identifiers are available to the whole program, some constants--
  undefined, infinity, NaN--some functions Date(), RegExp() String(), Array(), Symbol(),
  and even some objects--Math and JSON are defined globally.
  This is made possible by the global object, the global object is available to your program either in a node environment
  as the property global or in the web browser through the property window.
  ~ It should be noted that the browser's window property defines the core global property and also some
  additional globals specific to browsers and client-side Javascript.
  ~ ES2020 defines the `globalThis` property as a general way to refer to the global object in both the Browser
  and in the Node.js environment.
  ~ The Number(), String() and Boolean() globals are the simplest ways for type conversion.
  ~ Using this functions with the new keyword creates a wrapper-obj around it so beware.


  					Let us Identify VarIables.
  ~ Identifies defined with var are either function-scoped  or global-scoped depending on where they are defined
  ~ Identifiers defined with let and const can be  blocked-, function- or scoped globally depending on
  where they are defined.
  ~ Variables declared with var are a part of the globalThis object. It is otherwise for let and const
  ~ The Object.entries(obj_name) gives the entries (key, value) of the object passed
  ~ Use the elvis operator to acess property or indexes on objects that are null or undefined. 
  Like so: let a = null; a?.prop_name or a?.[0] for arrays.
  ~ Conditional function invocation. E.g. let not_func = undefined; not_func?.() // Doesn't throw err => undefined
  ~ The ` new Classname` can b used without the () parentheses if there are no args to the constructor
  ~ Property access or invocation has an higher precedence than any of the arithmetic operators.

   					Making a Public Statement
  ~ Statements are different from expressions in the sesnse that expressions return a value,
but statements distinctively affect the state of the envionment.
  ~ The default case in switch statements isn't compulsory and infact doesn't need to be the last statement
in the switch expression.
  ~ The for loop declares the initialize, test, increment  expressions in-between the parentheses and the statement in it's body.
  ~ Any of this parameters may be omitted, but the semi-colon delimiting this expressions have to be  in place.
  ~ Arrays, strings, sets and Maps are iterable. !!! Objects are not iterable.
  ~ For of loops are used to loop over the values of iterables
  ~ The iterators of map do not iterate over only the keys or the values, but both keys and values in a destructured form
  like so: for(let [k, v] of hypotheticalMap) { // Do something }
  ~ You can label loops using the syntax `label: loop block`
  ~ You can then use the jump statement to perform a jump operation on the preferred loop using it's label.
  ~ E.g mainLoop: (while x > 0)  { if(x % 7 == 0) {continue mainLoop} }
  ~ The throw statement is like the unwrap() function in rust. It exits with the expression passed as an argument to it.
  ~ When you use a try blocks defines boundaries for a block of expressions whose exceptions are to be handled.
  Though it is the try/catch/finally block, the other 2 are conditional. But when you have a try block yu should have at least one
  of them to follow.
  The try block defines expressions for which exceptions or errors we want to handle
  - The catch block defines how to handle the exceptions
  - The finally block runs at the end regardless of what happened previously. // You can call cleanup funcs herer
  - When a module exports a single value it isused with the default keyword like so: `export default <thing_to_export>`

  			
					Looking at Javascript Objectively
  - All (Hack-shually, most :)) objects in js have a prototype.
  - objects can be created with the literal syntax; using the Object.create() method, and also with the new keyword.
  - Using Object.create() you can pass an obj-literal or null to create an object where the arg is the prototype for the obj.
  Null creates an object without any prototype. A Null-Prototype Object with 0 properties or methods
  Passing an object literal makes the obj prototype be the Object.prototype object.
  - You can also pass Object.prototype to the Object.create() method.
  - It should be noted that whatever is taken in as an argument of the Object.create() method is the prototype.
  - Javascript finds object properties by looking for the property in its objects "owned property" and if it is not found
  it check if the object has a prototype and queries the prototype for the property. This continues like that till the property is found
  until a null-property is reached
  - <object_name>.propertyIsEnumerable("property") checks if the property is enumerable and returns a boolean accordingly
  - "property" in obj // checkks if the object has that property
  - <object_name>.hasOwnProperty("property") // Checks if the obj has own property matching that supplied as arg
  - The "in"operator distinguishly can separate property that exists, but are explicitly set to undefined.
  - Object.keys() does not return properties whose keys are symbols.
  - Object.assign(target_obj, ...src_objs) // Copies enumerable own-property of src-obj(s) to target object
  A good use for this will be to copy default properties assigned in  one obj to an newly created obj. But mind you, this
  has to be done with sense as naively-written code might not do you want.
  E.g Object.assign(o, defaults); // This will override all the props of o with defaults
  instead do this:
  o = Object.assign({}, defaults, o); // Copies default's props into empty object than overrides the props on the new object with o's.
  or using the spread operator as follows: o = { ...defualts, ...o };
  - The Object.seal(object_name) // Seals an object & prevents it from being extensible i.e no more props can be added.

            SNA123344 -- Serializing with JASON
  - Object serialization is the process of converting an object's state to a string from which it can be later be serialized.
  - JSON.stringify(obj) // Serializes a javascript object (or any datatype for that matter) into JSON
  - JSON.parse(json_obj) // Converts a json object back into a javascript object
  - JSON.parse() methods return an ISO-string when it tries to parse a previously serialized Date. 
  This can be converted into other date formats by susing the various string  methods like `toUTCString()`
  - Functions, RegExp, the Error Objects, and undefined can't be serialized.
  - ComputedPropertyName() // const resultsInSmthn = () => a.x + a.y;
  a[resultsInSmthn()] // The property name is computed from the function
  - Getters and Setters (Accessor Properties and data proeprties)
  let x = {
   a: 13,
   b: 12,
   prod_power: 0,
   get add() { return this.a + this.b },
   set productPower(index) { this.prod_power =  (this.a * this.b)**value; } // Sets the prod_power prop to the expression.
   };
   // The getters and setters are used like so:
   x.sum // Returns a value
   x.productPower = 2 // Returns 2 && now the prod_power prop changes accordingly

						Hiding things in Arrays
  - JS Arrays can be sparse i.e they can have indexes with empty spaces(holes) that return undefined when accessed;
  - Theay are like objects but with numeric properties known as index
  - A decimal index that as an integral counterpart evaluates to the same thing. // i.e arr[1.00] = arr[1]
  - String numbers like "1" are also equivalent to their integral counterparts whe used as index
  - Negative or other non-integral string array accessors are considered array properties and not indexes.
  - Arrays inherit from the Array prototype, Array.prototype.
  - Arrays can be created using the array literal syntax [], using the spread operator [...prev_arr], using the 
  Array.of(2) factory method which creates an array from the values supplies to it,
  the Array.from(array_like_obj) which creates arrays from array like objects like DOM collections,
  the Array() constructor which when invoked with a single integral value signifies the length of the array and with anything else
  as elements of the array.
  - Due to the Objectish implementation of arrays by the language itself using string property names as index arrays can't throw
  an index out of bounds error like other languages.
  - A distinction btwn regular JS objects and arrays is the existence of the length property on arrays.
  - Using the delete operator on arrays leavs gaps in the array
  - The splice method() is better used for inserting, replacing and deleting array elements.
  - The Array.from(array_like, ()=>{//dosomething}) takes an optional function as an argument which can be used to map through
  the elements of an array_like obj passed and mutate them, just like the array map method does. This approach is better 
  than first creating the array then mapping through the new array elements to mutate them.
  -Strings are array-like
  - Arrays have the .entries() that functions the same as the static function Object.entries();
  - The forEach() method takes a callback function which it doesn't call for sparse elements sin a sparse array
  - The forEach( (value, index, array) => {}). This also true for the map();
  - As oppposed to the forEach, the function passed to map() should return a value, as map itself returns a new array.
  - The filter() method returns a new array which is  asubset of that which it is called on. It filters through thte init arr and returns the 
  values that deem true for the condition specified in the callback.
  - Filter also skips sparse elements and can be used to remove sparse elements by doing this:
  sparse_arr.filter(() => true) // This is because the sparse 'empty' elements return false and thereby don't pass the truthy test.
  - It should be noted that sparse elements are not undefined. They are simply empty.
  - The every() and some() methods return boolean if every or some of the values respectively pass the test defined in the callback.
  - The reduce((accumulator, value, index, array) => {}, initial_value) method.
  - reduceRight() method does this from the right.
  - the flat() method is used to flatten arrays that contains nestd arrays inisde of them. When called with no argument it does one-level of flattening and with 1 arg it does an extra layer of flattening which increases with the number of arguments passed.
  - the flatMap() is like flat but returns a new array && also maps.
  - The concat() method adds the args given to it to the new array. if it is an array, it does one layer of flattening but not for nested arrays.
  It is not adviced due to perfomance cost for adding elements.
  - The pop() and push() are used to remove and add to the end of the array.


  						Making subarrays
  - slice() makes subarray slices of an array and takes a start and end parameters where it has to slice from. the end parameter is always  (end  - 1) and it can also take negative indexes.
  - splice() can insert or remove elements from an array.
  - 1st argument to splice() is Position to start insertion or deletion (not including that index)
  - 2nd argument is number of items to be deleted
  - 3rd (other arguments) are individual items to be added to the array if specified.
  - It should be noted that splice modifies array in place and return the items deleted or inserted. 
  - The fill() method sets default values for arrays or slice of arrays.
  - fill() modifies array in place but still returns that array.
  - fill(value, start_position, end_position); //The value of indexes from start_position to (not including) end_position is now value.
  - indexOf(val, start_position?); lastIndexOf(val, start_index); // lastIndexOf() starts searching from the last index. returns -1 if it isn't found
  - .sort() by defualt performs an alphaetic sort and when used on nums, it only compares the first digits.
  - To properly use the sort method, you need to pass in a custom sort function as its argument.
  - The sort() method does an in place sort and returns the dorted array also.
  - In the func passed to the sort method, if the first arg should appear first your func should return a +ve value, if the second arg should appear first it should return a -ve value and if they are equal it should return 0.
  - E.g. nums.sort((a, b) => a - b); sorts in ascending order.
  - reverse() method reverses the order of an array.
  - The join() method converts all the element of an array to a string and concatenates them together.
  - The join() takes optional arguments that you can use to delimit the elements of the new string instead of using the comma as in the array.
  - Using join("") uses no deimiter and hence all the items of the former array are packed together like sardines into the new string.
  - Using join(" "); uses spaces as their delimiter.

  				How Javascript Functions :)
  - Functions also go by the the name procedures && subroutines.
~> The language environment [Node.js || Bun || Browser]

#~> Node.js:

  ~ .editor is used to signal the node env to create an editor environment in the current repl


~> Questions ?

  ~ Map ? (Chapter 1, Pg 12 | Example 1.4 [Character Frequency Histograms])
  ~ Symbols? (Chapter 3.6 pg 41 | What exactly is their use case?)
  ~ Two's complement, binary programming and numeric operations in other bases like octal and hex.
  ~ Generator functions (function* ) ?
  ~ Differnce between search and Sort algorithms beyond the surface level.
