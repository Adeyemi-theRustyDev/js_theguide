!~> Javascipt the Definitive guide

~> Language Features

  ~ You can define your own methods for arrays (since they are technically objects) Syntax would be like:
    let my_arr = []; arr.to_str  = function() { // function body goes here }
  ~ Null Coalescing operator now in Javascript `??`
  ~ Also the Elvis operator (though, to this I see no use since it returns undefined anyways)
  ~ Javascript ignores line-breaks for the most part (even in statements lacking the semi-colon).
    Javascript treats some line-breaks as semi-colons and it does this using the following rules:
    - If the next line can't be treated as a continuation of the previous line, it adds a `;`
    - If the previous code can't be parsed without the addition of a `;`
    - The prevous is false in the case of the following keywords: yield, return, throw and break as
    their line-breaks are considered as semi-colons by the JS language
  ~ The defensive semi-colon is a semi-colon placed at the beginning of a line that could be interpreted
    as the continuation of the previous line by the Javascript interpreter.
  ~ In the javascript commenting system, you can not nest multi-line comments.
  ~ Although the javascript reserverd keywords can't generally be used as identifiers, they can be used as property names in objects
  ~ Javascript defines a laguage syntax that helps in writing utf-8 characters using only ASCII characters.
  Syntax: "caf\u{E9}" or "caf\u00e9" these both spell out cafÃ©.


  				Arithmetik and Numbers
  ~ The javascript number type is a 64-bit numerical type as defined by ASCII
  ~ Operations like array indexing and bitwise operations use 32-bits instead.
  ~ Inifinity is as a result of arithmetic operations on the number type which should nomrally result in an overflow.
  ~ Divison by zero doesn't result in an exception in JS but instead gives either -Infinity or Infinity, or NaN for (0/0) operations
  ~ 0 / 0, Infinity / Infinity, -Infinity / -Infinity, NaN / NaN all result in NaN
  ~ Zero and Negative Zero are equal, but + and - Infinty aren't equal.
  ~ The Bigint type was introduced into JS to store integral numbers comaptible with other Programming languages and API.
  It is by defualt in the decimal format although can be used in other number base. 
  ~ The BigInt() function converts JS numbers into the type 'bigint'
  ~ The Math.trunc() function is used to truncate decimal values to their integral counterparts.
  ~ The methods of the Math object do not take in bigint as parameter
  ~ Mixed arithmetic operation btwn "bigint" and number is not allowed.
  ~ The javascript Date() constructor returns a date and the getTime() returns a timestamp just as the Date.now() method
  which doesn't use a constructor to create a data.


  				Stringing things together
  ~ JS uses the UTF-16 character set of the UTF encoding.
  ~ The string method subString(a, b) effectively take a string slice from a to b (index b exclusive)
  ~ The slice method can perform the same func as subString() except it can also take -ve indexes.
  E.g let x = "adeyemi"; x.slice(-3) //=> 'emi'
  ~ string.indexOf('a', 4) //=> Returns first occurence of a in string starting from index 4. Position argument may be skipped
  and it just searches the entire string for the first occurence of the "string pattern" supplied.
  ~ In ES6 some boolean searching mthods have been added. These are:
    - string.startsWith("dis")
    - string.endsWith("dat")
    - string.includes("maybe")
  ~ The padStart and padEnd functions accept numbers as optional args to show how many (spaces - 1) will be added.
  ~ The "string".repeat(n) repeat the specified string n no of times.
  ~ Unicode-chars are written as "\u{uni_code_char}"
  ~ The String.raw`\n` temp-literal exclusive pseudo-func returns string without processing escaped chars.


  				Regular Expressions && Pattern Matching /SomeStuff/
  ~ They are denoted by a couple of slashes opposite of the escape-backk slash (like in comments => //) 
  ~ /^HTML/ => Matches the letters H, T, M or L at the start of a string


~> The language environment [Node.js || Bun || Browser]

#~> Node.js:

  ~ .editor is used to signal the node env to createe an editor environmen in the current repl


~> Questions ?

  ~ Map ? (Chapter 1, Pg 12 | Example 1.4 [Character Frequency Histograms])
